@using Wellness.Model
@using System.Globalization;


    <div class="month-menu">

        <MatButton Unelevated="true">Previous</MatButton>

        @foreach (var month in months)
        {

            <MatButton Unelevated="true" OnClick="@((args) => MonthChanged(args, month.RelativeIndex))">@month.Name, @month.Year.ToString().Substring(2)</MatButton>
        }

        <MatButton Unelevated="true">Next</MatButton>

    </div>


@code
{
        private Dictionary<string, object> ListAttributes { get; set; } =
        new Dictionary<string, object>()
            {
            {"vertical", false }
            };

        private List<Month>
            months;
            private int previousRelativeIndex = -5;
            private int nextRelativeIndex = 5;

            private Month SelectedMonth => this.months[SelectedIndex + 2];

            private int SelectedIndex { get; set; } = 0;

            [Parameter]
            public EventCallback<MonthChangedEventArgs>
                OnMonthChanged { get; set; }

                public async Task MonthChanged(MouseEventArgs args, int index)
                {
                await SelectMonth(index);
                }

                private Month createMonth(int monthNumber, int relativeIndex, int year)
                {
                return new Month()
                {
                Name = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthNumber),
                Number = monthNumber,
                RelativeIndex = relativeIndex,
                Year = year
                };
                }

                protected override async Task OnInitializedAsync()
                {
                months = new List<Month>
                    ();
                    var today = DateTime.Now;
                    var start = today.AddMonths(-2);

                    for (var i = 0; i < 5; i++)
                    {
                    var current = start.AddMonths(i);

                    months.Add(createMonth(current.Month, (-2 + i), current.Year));
                    }

                    await OnMonthChanged.InvokeAsync(new MonthChangedEventArgs(createMonth(today.Month, 0, today.Year)));
                    }

                    private async Task SelectMonth(int relatveIndex)
                    {
                    months = new List<Month>
                        ();
                        var today = DateTime.Now;
                        var start = today.AddMonths(relatveIndex - 2);

                        for (var i = 0; i < 5; i++)
                        {
                        var current = start.AddMonths(i);

                        months.Add(createMonth(current.Month, (relatveIndex - 2) + i, current.Year));
                        }

                        previousRelativeIndex = relatveIndex - 5;
                        nextRelativeIndex = relatveIndex + 5;

                        var selectedMonth = today.AddMonths(relatveIndex);

                        await OnMonthChanged.InvokeAsync(new MonthChangedEventArgs(createMonth(selectedMonth.Month, relatveIndex, selectedMonth.Year)));
                        }


                        private bool Open { set; get; }


                        private async Task UpdateSelectedIndex(int relativeIndex)
                        {
                        Open = false;
                        SelectedIndex = relativeIndex;
                        await SelectMonth(relativeIndex);
                        StateHasChanged();
                        }

                        private void HandleClose(EventArgs args)
                        {
                        Open = false;

                        StateHasChanged();
                        }


                        private void OnOpen()
                        {
                        Open = true;

                        StateHasChanged();
                        }
                        }
