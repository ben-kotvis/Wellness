@using Wellness.Model
@using System.Globalization
@using Wellness.Client.Components.UserParticipation.Activities.Add
@using Wellness.Client.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<Wellness.Client.Properties.Resources> Loc
@inherits Components.UserParticipation.Events.List.UserEventsComponent



@if (!EventParticipations.Any())
{
<div class="text-xl-center m-5">
    <span>@Loc["EmptyEventsMessage"]</span>
</div> }
            else
            {



@foreach (var item in EventParticipations)
{
<MatCard class="demo-mat-card">
    <MatCardContent>
        <div class="demo-mat-card-content">
            <MatHeadline6 class="demo-mat-card-clean-margin">
                @item.Model.Event.Name


                <MatChip Label="@Loc["Event"]" TrailingIcon="@MatIconNames.Event" Class="float-right"></MatChip>
            </MatHeadline6>
        </div>
        <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin border-top">
            <p>
                <span class="points">@item.Model.PointsEarned</span>
                <span>@Loc["Points"]</span>

                @if (item.Model.Event.IconName != default)
                {
                    <MatIcon Icon="@item.Model.Event.IconName"></MatIcon>
                }
                else
                {
                    <MatIcon Icon="@MatIconNames.Cancel_presentation"></MatIcon>
                }
            </p>
            <p>
                @item.Model.SubmissionDate.ToString("MM/dd/yyyy")
            </p>
            <p>
                <MatIconButton Icon="@MatIconNames.Delete" OnClick="@((args) => { dialogIsOpen = true; SelectedId = item.Model.Id; })"></MatIconButton>
            </p>
        </MatBody2>
    </MatCardContent>
</MatCard>}








                <MatTable Items="@EventParticipations" class="wellness-table" PageSize="30" Striped="true"
                          HeaderRowClass="wellness-table-header-row" RowClass="wellness-table-row" ShowPaging="false" ShowFooter="false">
                    <MatTableHeader>
                        <th></th>
                        <th>@Loc["Event"]</th>
                        <th>@Loc["UploadedFiles"]</th>
                        <th>@Loc["Points"]</th>
                        <th>@Loc["EventDate"]</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>
                            <MatIconButton Icon="delete" OnClick="@((args) => { dialogIsOpen = true; SelectedId = context.Model.Id; })"></MatIconButton>
                        </td>
                        <td>@context.Model.Event.Name</td>
                        <td>
                            @if (context.Model.Attachment != null)
                                {
            <span>
                @context.Model.Attachment?.Name
                <MatIconButton Icon="open_in_new" OnClick="@((args) => ViewModel.PreviewAttachment(context.Model.Id))"></MatIconButton>
            </span>}
                        </td>
                        <td>@context.Model.PointsEarned</td>
                        <td>@context.Model.SubmissionDate.ToString("MM/dd/yyyy")</td>
                    </MatTableRow>
                </MatTable>

                }


<ConfirmationDialog IsOpen="@dialogIsOpen" SelectedId="@SelectedId" OnConfirmDelete="@(async (selectedId) => await OnConfirmDelete.InvokeAsync(selectedId))"></ConfirmationDialog>


<MatDialog @bind-IsOpen="@ViewModel.PreviewDialogIsOpen">
    <MatDialogTitle>@Loc["AttachmentView"]</MatDialogTitle>
    <MatDialogContent Class="accordion">
        <object data="@ViewModel.PreviewDataUrl" type="@ViewModel.PreviewFileType"></object>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { ViewModel.PreviewDialogIsOpen = false; })">@Loc["Close"]</MatButton>
    </MatDialogActions>
</MatDialog>
