@using Wellness.Model
@using System.Globalization
@using Wellness.Client.Components.UserParticipation.Activities.Add
@using Wellness.Client.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<Wellness.Client.Properties.Resources> Loc
@inherits Components.UserParticipation.Events.List.UserEventsComponent



@if (EventParticipations == default || !EventParticipations.Any())
{
<div class="text-xl-center m-5">
    <span>@Loc["EmptyEventsMessage"]</span>
</div> 
}
else
{

@foreach (var item in EventParticipations.OrderByDescending(i => i.Model.SubmissionDate))
{
    <MatCard class="demo-mat-card">

        <div class="demo-mat-card-content">
            <MatHeadline6 class="m-2">
                @item.Model.Event.Name

                <MatChip Label="@Loc["Event"]" TrailingIcon="@MatIconNames.Event" Class="float-right"></MatChip>
            </MatHeadline6>
            <MatDivider></MatDivider>
        </div>
        <MatCardContent>
            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                <p>
                    <span class="points">@item.Model.PointsEarned</span>
                    <span>@Loc["Points"]</span>

                    @if (item.Model.Event.IconName != default)
                    {
    <MatIcon Icon="@item.Model.Event.IconName"></MatIcon> 
    }
                    else
                    {
    <MatIcon Icon="@MatIconNames.Cancel_presentation"></MatIcon>}
                </p>
                <p>
                    @if (item.Model.Attachment != null)
                    {
                        <span>
                            @item.Model.Attachment?.Name
                            <MatIconButton Icon="open_in_new" OnClick="@((args) => ViewModel.PreviewAttachment(item.Model.Id))"></MatIconButton>
                        </span>
                    }
                </p>
                <p>
                    @item.Model.SubmissionDate.ToString("MM/dd/yyyy")
                </p>
                <p>
                    <MatIconButton Icon="@MatIconNames.Delete" OnClick="@(async (selectedId) => await OnDeleteRequested.InvokeAsync(item.Model.Id))"></MatIconButton>
                </p>
            </MatBody2>
        </MatCardContent>
    </MatCard>
    }

}


<ConfirmationDialog IsOpen="@ViewModel.IsDeletedEventDialogOpen" OnConfirmDelete="@(async (selectedId) => await OnConfirmDelete.InvokeAsync(null))"></ConfirmationDialog>


<MatDialog @bind-IsOpen="@ViewModel.PreviewDialogIsOpen">
    <MatDialogTitle>@Loc["AttachmentView"]</MatDialogTitle>
    <MatDialogContent Class="accordion">
        <object data="@ViewModel.PreviewDataUrl" type="@ViewModel.PreviewFileType"></object>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { ViewModel.PreviewDialogIsOpen = false; })">@Loc["Close"]</MatButton>
    </MatDialogActions>
</MatDialog>
