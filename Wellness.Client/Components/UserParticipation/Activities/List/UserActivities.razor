@using Wellness.Model
@using System.Globalization
@using Wellness.Client.Components.UserParticipation.Activities.Add
@using Wellness.Client.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<Wellness.Client.Properties.Resources> Loc
@inherits Components.UserParticipation.Activities.List.UserActivitiesComponent



@if (ActivityParticipations != default && ActivityParticipations.Any())
{

    @foreach (var item in ActivityParticipations.OrderByDescending(i => i.Model.SubmissionDate))
    {
<MatCard class="demo-mat-card">

    <div class="demo-mat-card-content">
        <MatHeadline6 Class="m-2">
            @item.Model.Activity.Name


            <MatChip Label="@Loc["Activity"]" TrailingIcon="@MatIconNames.Recent_actors" Class="float-right"></MatChip>
        </MatHeadline6>

        <MatDivider></MatDivider>
    </div>
    <MatCardContent>
        <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
            <p>
                <span class="points">@item.Model.PointsEarned</span>
                <span>@Loc["Points"]</span>

                @if (item.Model.Activity.IconName != default)
                {
                    <MatIcon Icon="@item.Model.Activity.IconName"></MatIcon> }
                else
                {
                    <MatIcon Icon="@MatIconNames.Cancel_presentation"></MatIcon>}
            </p>
            <p>
                @item.Model.SubmissionDate.ToString("MM/dd/yyyy")
            </p>
            <p>
                @item.Model.Minutes<span> @Loc["Minutes"]</span>

                 </p>
        </MatBody2>
    </MatCardContent>
    <MatCardActions>

        <MatCardActionIcons>
            <MatIconButton Class="float-right" Icon="@MatIconNames.Delete" OnClick="@(async () => await OnDeleteRequested.InvokeAsync(item.Model.Id))"></MatIconButton>
        </MatCardActionIcons>
    </MatCardActions>
</MatCard>
    }


}
else
{
<div class="text-xl-center m-5">
    <span>
        @Loc["NoActivitiesMessage"]
    </span>
</div>
}

<ConfirmationDialog IsOpen="@ViewModel.IsDeletedActivityDialogOpen" OnConfirmDelete="@(async (selectedId) => await OnConfirmDelete.InvokeAsync(null))"></ConfirmationDialog>
