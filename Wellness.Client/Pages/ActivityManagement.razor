@page "/ActivityManagement"

@using Wellness.Domain.ModelValidation
@using Blazored.FluentValidation;
@using Wellness.Client.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<Wellness.Client.Properties.Resources> Loc
@inherits Wellness.Client.Pages.ActivityManagementComponent

<h2>@Loc["ActivityManagement"]</h2>

<div class="float-right">
    <MatIconButton Icon="add" @onclick="ViewModel.New"></MatIconButton>
</div>
<MatTable Items="@ViewModel.Activities" class="wellness-table" PageSize="30" ShowPaging="false" ShowFooter="false">
    <MatTableHeader>
        <th></th>
        <th>@Loc["Name"]</th>
        <th>@Loc["Active"]</th>
        <th>@Loc["CreatedOn"]</th>
        <th>@Loc["CreatedBy"]</th>
    </MatTableHeader>
    <MatTableRow>
        <td>
            <MatIconButton Icon="delete" @onclick="(e => ViewModel.Delete(context.Model.Id))"></MatIconButton>
            <MatIconButton Icon="edit" @onclick="(e => ViewModel.Edit(context.Model.Id))"></MatIconButton>
        </td>
        <td>@context.Model.Name</td>
        <td>@context.Model.Active</td>
        <td>@context.Common.CreatedOn.ToString("yyyy-MM-dd")</td>
        <td>@context.Common.CreatedBy</td>
    </MatTableRow>
</MatTable>

<ConfirmationDialog IsOpen="@ViewModel.DeleteDialogIsOpen" SelectedId="@ViewModel.SelectedDeleteId" OnConfirmDelete="@ViewModel.OnDeleteConfirmed"></ConfirmationDialog>


@if (ViewModel.Debug)
{
    <div class="float-right">
        <MatIconButton Icon="import_export" @onclick="ViewModel.Load"></MatIconButton>
    </div>
}
<EditForm Model="@ViewModel.NewOrEditActivity" OnValidSubmit="@ViewModel.Save">
    <MatDialog @bind-IsOpen="ViewModel.EditModalOpen">
        <FluentValidationValidator />
        <ValidationSummary />
        <MatDialogTitle>
            @Loc["Activity"]
        </MatDialogTitle>
        <MatDialogContent>
            <MatTextField @bind-Value="ViewModel.NewOrEditActivity.Name" @bind-Disabled="ViewModel.IsSaving" Label="@Loc["Name"]"></MatTextField>
            <ValidationMessage For="() => ViewModel.NewOrEditActivity.Name"></ValidationMessage>
            
            <p>
                <MatAutocompleteList Items="@ViewModel.MatIconNames" TItem="String" Label="@Loc["SelectIcon"]" CustomStringSelector="@(i => i)"
                                     @bind-Value="ViewModel.NewOrEditActivity.IconName" Context="selectContext">
                    <ItemTemplate>
                        <span>@selectContext</span>
                        <MatIcon Icon="@selectContext" />
                    </ItemTemplate>
                </MatAutocompleteList>
            </p>
            <p>
                <MatCheckbox @bind-Value="ViewModel.NewOrEditActivity.Active" @bind-Disabled="ViewModel.IsSaving" Label="@Loc["Active"]"></MatCheckbox>
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { ViewModel.EditModalOpen = false; })">
                @Loc["Cancel"]
            </MatButton>
            <MatButton Type="submit">@Loc["OK"]<MatIcon Icon="cached" @bind-Class="ViewModel.IconClass"></MatIcon></MatButton>
        </MatDialogActions>
    </MatDialog>
</EditForm>