@page "/EventManagement"

@using Wellness.Domain.ModelValidation
@using Blazored.FluentValidation;
@using Wellness.Client.Components.Shared; 
@inject Microsoft.Extensions.Localization.IStringLocalizer<Wellness.Client.Properties.Resources> Loc
@inherits Wellness.Client.Pages.EventManagementComponent

<h2>@Loc["EventManagement"]</h2>

<div class="float-right">
    <MatIconButton Icon="add" @onclick="ViewModel.New"></MatIconButton>
</div>
<MatTable Items="@ViewModel.Events" class="wellness-table" PageSize="30" ShowPaging="false" ShowFooter="false">
    <MatTableHeader>
        <th></th>
        <th>@Loc["Name"]</th>
        <th>@Loc["PointsPerEvent"]</th>
        <th>@Loc["AnnualMax"]</th>
        <th>@Loc["Active"]</th>
        <th>@Loc["RequireAttachment"]</th>
    </MatTableHeader>
    <MatTableRow>
        <td>
            <MatIconButton Icon="delete" @onclick="(e => ViewModel.Delete(context.Model.Id))"></MatIconButton>
            <MatIconButton Icon="edit" @onclick="(e => ViewModel.Edit(context.Model.Id))"></MatIconButton>
        </td>
        <td>@context.Model.Name</td>
        <td>@context.Model.Points</td>
        <td>@context.Model.AnnualMaximum</td>
        <td><MatCheckbox @bind-Value="context.Model.Active" Disabled="true"></MatCheckbox></td>
        <td><MatCheckbox @bind-Value="context.Model.RequireAttachment" Disabled="true"></MatCheckbox></td>
    </MatTableRow>
</MatTable>


<ConfirmationDialog IsOpen="@ViewModel.DeleteDialogIsOpen" SelectedId="@ViewModel.SelectedDeleteId" OnConfirmDelete="@ViewModel.OnDeleteConfirmed"></ConfirmationDialog>


@if (ViewModel.Debug)
{
    <div class="float-right">
        <MatIconButton Icon="import_export" @onclick="ViewModel.Load"></MatIconButton>
    </div>
}
<EditForm Model="@ViewModel.NewOrEditEvent" OnValidSubmit="@ViewModel.Save">
    <FluentValidationValidator />
    <ValidationSummary />
    <MatDialog @bind-IsOpen="ViewModel.EditModalOpen">
        <MatDialogTitle>
            @Loc["Event"]
        </MatDialogTitle>
        <MatDialogContent>
            <p>
                <MatTextField @bind-Value="ViewModel.NewOrEditEvent.Name " @bind-Disabled="ViewModel.IsSaving" Label="@Loc["Name"]"></MatTextField>
                <ValidationMessage For="() => ViewModel.NewOrEditEvent.Name"></ValidationMessage>
            </p>
            <p>

                <MatTextField @bind-Value="ViewModel.NewOrEditEvent.Points" @bind-Disabled="ViewModel.IsSaving" Label="@Loc["PointsPerEvent"]"></MatTextField>
                <ValidationMessage For="() => ViewModel.NewOrEditEvent.Points"></ValidationMessage>
            </p>
            <p>
                <MatTextField @bind-Value="ViewModel.NewOrEditEvent.AnnualMaximum" @bind-Disabled="ViewModel.IsSaving" Label="@Loc["AnnualMax"]"></MatTextField>
                <ValidationMessage For="() => ViewModel.NewOrEditEvent.AnnualMaximum"></ValidationMessage>
            </p>
            <div>
                <MatCheckbox @bind-Value="ViewModel.NewOrEditEvent.RequireAttachment" @bind-Disabled="ViewModel.IsSaving" Label="@Loc["RequireAttachment"]"></MatCheckbox>
            </div>
            <div>
                <MatCheckbox @bind-Value="ViewModel.NewOrEditEvent.Active" @bind-Disabled="ViewModel.IsSaving" Label="@Loc["Active"]"></MatCheckbox>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="button" OnClick="@(e => { ViewModel.EditModalOpen = false; })">@Loc["Cancel"]</MatButton>
            <MatButton Type="submit">@Loc["OK"]<MatIcon Icon="cached" @bind-Class="ViewModel.IconClass"></MatIcon></MatButton>
        </MatDialogActions>
    </MatDialog>
</EditForm>
